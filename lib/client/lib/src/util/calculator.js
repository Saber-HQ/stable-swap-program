"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.computeY = exports.computeD = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
var ZERO = new bn_js_1.default(0);
var ONE = new bn_js_1.default(1);
var N_COINS = new bn_js_1.default(2); // n
/**
 * Compute the StableSwap invariant
 * @param ampFactor Amplification coefficient (A)
 * @param amountA Swap balance of token A
 * @param amountB Swap balance of token B
 * Reference: https://github.com/curvefi/curve-contract/blob/7116b4a261580813ef057887c5009e22473ddb7d/tests/simulation.py#L31
 */
var computeD = function (ampFactor, amountA, amountB) {
  var Ann = ampFactor.mul(N_COINS); // A*n^n
  var S = amountA.add(amountB); // sum(x_i), a.k.a S
  if (S.isZero()) {
    return S;
  }
  var dPrev = ZERO;
  var d = S;
  while (d.sub(dPrev).abs().gt(ONE)) {
    dPrev = d;
    var dP = d;
    dP = dP.mul(d).div(new bn_js_1.default(amountA.mul(N_COINS)));
    dP = dP.mul(d).div(new bn_js_1.default(amountB.mul(N_COINS)));
    var dNumerator = d.mul(
      new bn_js_1.default(Ann.mul(S).add(new bn_js_1.default(dP.mul(N_COINS))))
    );
    var dDenominator = d
      .mul(new bn_js_1.default(Ann.sub(ONE)))
      .add(dP.mul(new bn_js_1.default(N_COINS.add(ONE))));
    d = dNumerator.div(dDenominator);
  }
  return d;
};
exports.computeD = computeD;
/**
 * Compute Y amount in respect to X on the StableSwap curve
 * @param ampFactor Amplification coefficient (A)
 * @param x The quantity of underlying asset
 * @param d StableSwap invariant
 * Reference: https://github.com/curvefi/curve-contract/blob/7116b4a261580813ef057887c5009e22473ddb7d/tests/simulation.py#L55
 */
var computeY = function (ampFactor, x, d) {
  var Ann = ampFactor.mul(N_COINS); // A*n^n
  // sum' = prod' = x
  var b = x.add(d.div(Ann)).sub(d); // b = sum' - (A*n**n - 1) * D / (A * n**n)
  var c = d // c =  D ** (n + 1) / (n ** (2 * n) * prod' * A)
    .mul(d)
    .mul(d)
    .div(new bn_js_1.default(N_COINS.mul(N_COINS).mul(x).mul(Ann)));
  var yPrev = ZERO;
  var y = d;
  while (y.sub(yPrev).abs().gt(ONE)) {
    yPrev = y;
    y = y
      .mul(y)
      .add(c)
      .div(new bn_js_1.default(N_COINS.mul(y).add(b)));
  }
  return y;
};
exports.computeY = computeY;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlsL2NhbGN1bGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXVCO0FBRXZCLElBQU0sSUFBSSxHQUFHLElBQUksZUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLElBQU0sR0FBRyxHQUFHLElBQUksZUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3RCLElBQU0sT0FBTyxHQUFHLElBQUksZUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSTtBQUUvQjs7Ozs7O0dBTUc7QUFDSSxJQUFNLFFBQVEsR0FBRyxVQUFDLFNBQWEsRUFBRSxPQUFXLEVBQUUsT0FBVztJQUM5RCxJQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUTtJQUM1QyxJQUFNLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsb0JBQW9CO0lBQ3BELElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ2QsT0FBTyxDQUFDLENBQUM7S0FDVjtJQUVELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztJQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2pDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDVixJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDWCxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakQsRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWpELElBQU0sVUFBVSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFFLElBQU0sWUFBWSxHQUFHLENBQUM7YUFDbkIsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN6QixHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQ2xDO0lBRUQsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDLENBQUM7QUF2QlcsUUFBQSxRQUFRLFlBdUJuQjtBQUVGOzs7Ozs7R0FNRztBQUNJLElBQU0sUUFBUSxHQUFHLFVBQUMsU0FBYSxFQUFFLENBQUssRUFBRSxDQUFLO0lBQ2xELElBQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRO0lBQzVDLG1CQUFtQjtJQUNuQixJQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQywyQ0FBMkM7SUFDL0UsSUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGlEQUFpRDtTQUMxRCxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ04sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNOLEdBQUcsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRXJELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztJQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2pDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDVixDQUFDLEdBQUcsQ0FBQzthQUNGLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDTixHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQ04sR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN2QztJQUVELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQyxDQUFDO0FBcEJXLFFBQUEsUUFBUSxZQW9CbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQk4gZnJvbSBcImJuLmpzXCI7XG5cbmNvbnN0IFpFUk8gPSBuZXcgQk4oMCk7XG5jb25zdCBPTkUgPSBuZXcgQk4oMSk7XG5jb25zdCBOX0NPSU5TID0gbmV3IEJOKDIpOyAvLyBuXG5cbi8qKlxuICogQ29tcHV0ZSB0aGUgU3RhYmxlU3dhcCBpbnZhcmlhbnRcbiAqIEBwYXJhbSBhbXBGYWN0b3IgQW1wbGlmaWNhdGlvbiBjb2VmZmljaWVudCAoQSlcbiAqIEBwYXJhbSBhbW91bnRBIFN3YXAgYmFsYW5jZSBvZiB0b2tlbiBBXG4gKiBAcGFyYW0gYW1vdW50QiBTd2FwIGJhbGFuY2Ugb2YgdG9rZW4gQlxuICogUmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vY3VydmVmaS9jdXJ2ZS1jb250cmFjdC9ibG9iLzcxMTZiNGEyNjE1ODA4MTNlZjA1Nzg4N2M1MDA5ZTIyNDczZGRiN2QvdGVzdHMvc2ltdWxhdGlvbi5weSNMMzFcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXB1dGVEID0gKGFtcEZhY3RvcjogQk4sIGFtb3VudEE6IEJOLCBhbW91bnRCOiBCTik6IEJOID0+IHtcbiAgY29uc3QgQW5uID0gYW1wRmFjdG9yLm11bChOX0NPSU5TKTsgLy8gQSpuXm5cbiAgY29uc3QgUyA9IGFtb3VudEEuYWRkKGFtb3VudEIpOyAvLyBzdW0oeF9pKSwgYS5rLmEgU1xuICBpZiAoUy5pc1plcm8oKSkge1xuICAgIHJldHVybiBTO1xuICB9XG5cbiAgbGV0IGRQcmV2ID0gWkVSTztcbiAgbGV0IGQgPSBTO1xuICB3aGlsZSAoZC5zdWIoZFByZXYpLmFicygpLmd0KE9ORSkpIHtcbiAgICBkUHJldiA9IGQ7XG4gICAgbGV0IGRQID0gZDtcbiAgICBkUCA9IGRQLm11bChkKS5kaXYobmV3IEJOKGFtb3VudEEubXVsKE5fQ09JTlMpKSk7XG4gICAgZFAgPSBkUC5tdWwoZCkuZGl2KG5ldyBCTihhbW91bnRCLm11bChOX0NPSU5TKSkpO1xuXG4gICAgY29uc3QgZE51bWVyYXRvciA9IGQubXVsKG5ldyBCTihBbm4ubXVsKFMpLmFkZChuZXcgQk4oZFAubXVsKE5fQ09JTlMpKSkpKTtcbiAgICBjb25zdCBkRGVub21pbmF0b3IgPSBkXG4gICAgICAubXVsKG5ldyBCTihBbm4uc3ViKE9ORSkpKVxuICAgICAgLmFkZChkUC5tdWwobmV3IEJOKE5fQ09JTlMuYWRkKE9ORSkpKSk7XG4gICAgZCA9IGROdW1lcmF0b3IuZGl2KGREZW5vbWluYXRvcik7XG4gIH1cblxuICByZXR1cm4gZDtcbn07XG5cbi8qKlxuICogQ29tcHV0ZSBZIGFtb3VudCBpbiByZXNwZWN0IHRvIFggb24gdGhlIFN0YWJsZVN3YXAgY3VydmVcbiAqIEBwYXJhbSBhbXBGYWN0b3IgQW1wbGlmaWNhdGlvbiBjb2VmZmljaWVudCAoQSlcbiAqIEBwYXJhbSB4IFRoZSBxdWFudGl0eSBvZiB1bmRlcmx5aW5nIGFzc2V0XG4gKiBAcGFyYW0gZCBTdGFibGVTd2FwIGludmFyaWFudFxuICogUmVmZXJlbmNlOiBodHRwczovL2dpdGh1Yi5jb20vY3VydmVmaS9jdXJ2ZS1jb250cmFjdC9ibG9iLzcxMTZiNGEyNjE1ODA4MTNlZjA1Nzg4N2M1MDA5ZTIyNDczZGRiN2QvdGVzdHMvc2ltdWxhdGlvbi5weSNMNTVcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXB1dGVZID0gKGFtcEZhY3RvcjogQk4sIHg6IEJOLCBkOiBCTik6IEJOID0+IHtcbiAgY29uc3QgQW5uID0gYW1wRmFjdG9yLm11bChOX0NPSU5TKTsgLy8gQSpuXm5cbiAgLy8gc3VtJyA9IHByb2QnID0geFxuICBjb25zdCBiID0geC5hZGQoZC5kaXYoQW5uKSkuc3ViKGQpOyAvLyBiID0gc3VtJyAtIChBKm4qKm4gLSAxKSAqIEQgLyAoQSAqIG4qKm4pXG4gIGNvbnN0IGMgPSBkIC8vIGMgPSAgRCAqKiAobiArIDEpIC8gKG4gKiogKDIgKiBuKSAqIHByb2QnICogQSlcbiAgICAubXVsKGQpXG4gICAgLm11bChkKVxuICAgIC5kaXYobmV3IEJOKE5fQ09JTlMubXVsKE5fQ09JTlMpLm11bCh4KS5tdWwoQW5uKSkpO1xuXG4gIGxldCB5UHJldiA9IFpFUk87XG4gIGxldCB5ID0gZDtcbiAgd2hpbGUgKHkuc3ViKHlQcmV2KS5hYnMoKS5ndChPTkUpKSB7XG4gICAgeVByZXYgPSB5O1xuICAgIHkgPSB5XG4gICAgICAubXVsKHkpXG4gICAgICAuYWRkKGMpXG4gICAgICAuZGl2KG5ldyBCTihOX0NPSU5TLm11bCh5KS5hZGQoYikpKTtcbiAgfVxuXG4gIHJldHVybiB5O1xufTtcbiJdfQ==
